// generated by qbg -usedatastorewrapper -output model_query.go .; DO NOT EDIT

package backend

import (
	"go.mercari.io/datastore"
)

// Plugin supply hook point for query constructions.
type Plugin interface {
	Init(typeName string)
	Ancestor(ancestor datastore.Key)
	KeysOnly()
	Start(cur datastore.Cursor)
	Offset(offset int)
	Limit(limit int)
	Filter(name, op string, value interface{})
	Asc(name string)
	Desc(name string)
}

// Plugger supply Plugin component.
type Plugger interface {
	Plugin() Plugin
}

// OrganizationQueryBuilder build query for Organization.
type OrganizationQueryBuilder struct {
	q             datastore.Query
	plugin        Plugin
	Name          *OrganizationQueryProperty
	URL           *OrganizationQueryProperty
	LogoURL       *OrganizationQueryProperty
	Order         *OrganizationQueryProperty
	CreatedAt     *OrganizationQueryProperty
	UpdatedAt     *OrganizationQueryProperty
	SchemaVersion *OrganizationQueryProperty
}

// OrganizationQueryProperty has property information for OrganizationQueryBuilder.
type OrganizationQueryProperty struct {
	bldr *OrganizationQueryBuilder
	name string
}

// NewOrganizationQueryBuilder create new OrganizationQueryBuilder.
func NewOrganizationQueryBuilder(client datastore.Client) *OrganizationQueryBuilder {
	return NewOrganizationQueryBuilderWithKind(client, "Organization")
}

// NewOrganizationQueryBuilderWithKind create new OrganizationQueryBuilder with specific kind.
func NewOrganizationQueryBuilderWithKind(client datastore.Client, kind string) *OrganizationQueryBuilder {
	q := client.NewQuery(kind)
	bldr := &OrganizationQueryBuilder{q: q}
	bldr.Name = &OrganizationQueryProperty{
		bldr: bldr,
		name: "Name",
	}
	bldr.URL = &OrganizationQueryProperty{
		bldr: bldr,
		name: "URL",
	}
	bldr.LogoURL = &OrganizationQueryProperty{
		bldr: bldr,
		name: "LogoURL",
	}
	bldr.Order = &OrganizationQueryProperty{
		bldr: bldr,
		name: "Order",
	}
	bldr.CreatedAt = &OrganizationQueryProperty{
		bldr: bldr,
		name: "CreatedAt",
	}
	bldr.UpdatedAt = &OrganizationQueryProperty{
		bldr: bldr,
		name: "UpdatedAt",
	}
	bldr.SchemaVersion = &OrganizationQueryProperty{
		bldr: bldr,
		name: "SchemaVersion",
	}

	if plugger, ok := interface{}(bldr).(Plugger); ok {
		bldr.plugin = plugger.Plugin()
		bldr.plugin.Init("Organization")
	}

	return bldr
}

// Ancestor sets parent key to ancestor query.
func (bldr *OrganizationQueryBuilder) Ancestor(parentKey datastore.Key) *OrganizationQueryBuilder {
	bldr.q = bldr.q.Ancestor(parentKey)
	if bldr.plugin != nil {
		bldr.plugin.Ancestor(parentKey)
	}
	return bldr
}

// KeysOnly sets keys only option to query.
func (bldr *OrganizationQueryBuilder) KeysOnly() *OrganizationQueryBuilder {
	bldr.q = bldr.q.KeysOnly()
	if bldr.plugin != nil {
		bldr.plugin.KeysOnly()
	}
	return bldr
}

// Start setup to query.
func (bldr *OrganizationQueryBuilder) Start(cur datastore.Cursor) *OrganizationQueryBuilder {
	bldr.q = bldr.q.Start(cur)
	if bldr.plugin != nil {
		bldr.plugin.Start(cur)
	}
	return bldr
}

// Offset setup to query.
func (bldr *OrganizationQueryBuilder) Offset(offset int) *OrganizationQueryBuilder {
	bldr.q = bldr.q.Offset(offset)
	if bldr.plugin != nil {
		bldr.plugin.Offset(offset)
	}
	return bldr
}

// Limit setup to query.
func (bldr *OrganizationQueryBuilder) Limit(limit int) *OrganizationQueryBuilder {
	bldr.q = bldr.q.Limit(limit)
	if bldr.plugin != nil {
		bldr.plugin.Limit(limit)
	}
	return bldr
}

// Query returns *datastore.Query.
func (bldr *OrganizationQueryBuilder) Query() datastore.Query {
	return bldr.q
}

// Filter with op & value.
func (p *OrganizationQueryProperty) Filter(op string, value interface{}) *OrganizationQueryBuilder {
	switch op {
	case "<=":
		p.LessThanOrEqual(value)
	case ">=":
		p.GreaterThanOrEqual(value)
	case "<":
		p.LessThan(value)
	case ">":
		p.GreaterThan(value)
	case "=":
		p.Equal(value)
	default:
		p.bldr.q = p.bldr.q.Filter(p.name+" "+op, value) // error raised by native query
	}
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, op, value)
	}
	return p.bldr
}

// LessThanOrEqual filter with value.
func (p *OrganizationQueryProperty) LessThanOrEqual(value interface{}) *OrganizationQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<=", value)
	}
	return p.bldr
}

// GreaterThanOrEqual filter with value.
func (p *OrganizationQueryProperty) GreaterThanOrEqual(value interface{}) *OrganizationQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">=", value)
	}
	return p.bldr
}

// LessThan filter with value.
func (p *OrganizationQueryProperty) LessThan(value interface{}) *OrganizationQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<", value)
	}
	return p.bldr
}

// GreaterThan filter with value.
func (p *OrganizationQueryProperty) GreaterThan(value interface{}) *OrganizationQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">", value)
	}
	return p.bldr
}

// Equal filter with value.
func (p *OrganizationQueryProperty) Equal(value interface{}) *OrganizationQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" =", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "=", value)
	}
	return p.bldr
}

// Asc order.
func (p *OrganizationQueryProperty) Asc() *OrganizationQueryBuilder {
	p.bldr.q = p.bldr.q.Order(p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Asc(p.name)
	}
	return p.bldr
}

// Desc order.
func (p *OrganizationQueryProperty) Desc() *OrganizationQueryBuilder {
	p.bldr.q = p.bldr.q.Order("-" + p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Desc(p.name)
	}
	return p.bldr
}

// PugEventQueryBuilder build query for PugEvent.
type PugEventQueryBuilder struct {
	q              datastore.Query
	plugin         Plugin
	OrganizationID *PugEventQueryProperty
	Title          *PugEventQueryProperty
	Description    *PugEventQueryProperty
	URL            *PugEventQueryProperty
	StartAt        *PugEventQueryProperty
	EndAt          *PugEventQueryProperty
	CreatedAt      *PugEventQueryProperty
	UpdatedAt      *PugEventQueryProperty
	SchemaVersion  *PugEventQueryProperty
}

// PugEventQueryProperty has property information for PugEventQueryBuilder.
type PugEventQueryProperty struct {
	bldr *PugEventQueryBuilder
	name string
}

// NewPugEventQueryBuilder create new PugEventQueryBuilder.
func NewPugEventQueryBuilder(client datastore.Client) *PugEventQueryBuilder {
	return NewPugEventQueryBuilderWithKind(client, "PugEvent")
}

// NewPugEventQueryBuilderWithKind create new PugEventQueryBuilder with specific kind.
func NewPugEventQueryBuilderWithKind(client datastore.Client, kind string) *PugEventQueryBuilder {
	q := client.NewQuery(kind)
	bldr := &PugEventQueryBuilder{q: q}
	bldr.OrganizationID = &PugEventQueryProperty{
		bldr: bldr,
		name: "OrganizationID",
	}
	bldr.Title = &PugEventQueryProperty{
		bldr: bldr,
		name: "Title",
	}
	bldr.Description = &PugEventQueryProperty{
		bldr: bldr,
		name: "Description",
	}
	bldr.URL = &PugEventQueryProperty{
		bldr: bldr,
		name: "URL",
	}
	bldr.StartAt = &PugEventQueryProperty{
		bldr: bldr,
		name: "StartAt",
	}
	bldr.EndAt = &PugEventQueryProperty{
		bldr: bldr,
		name: "EndAt",
	}
	bldr.CreatedAt = &PugEventQueryProperty{
		bldr: bldr,
		name: "CreatedAt",
	}
	bldr.UpdatedAt = &PugEventQueryProperty{
		bldr: bldr,
		name: "UpdatedAt",
	}
	bldr.SchemaVersion = &PugEventQueryProperty{
		bldr: bldr,
		name: "SchemaVersion",
	}

	if plugger, ok := interface{}(bldr).(Plugger); ok {
		bldr.plugin = plugger.Plugin()
		bldr.plugin.Init("PugEvent")
	}

	return bldr
}

// Ancestor sets parent key to ancestor query.
func (bldr *PugEventQueryBuilder) Ancestor(parentKey datastore.Key) *PugEventQueryBuilder {
	bldr.q = bldr.q.Ancestor(parentKey)
	if bldr.plugin != nil {
		bldr.plugin.Ancestor(parentKey)
	}
	return bldr
}

// KeysOnly sets keys only option to query.
func (bldr *PugEventQueryBuilder) KeysOnly() *PugEventQueryBuilder {
	bldr.q = bldr.q.KeysOnly()
	if bldr.plugin != nil {
		bldr.plugin.KeysOnly()
	}
	return bldr
}

// Start setup to query.
func (bldr *PugEventQueryBuilder) Start(cur datastore.Cursor) *PugEventQueryBuilder {
	bldr.q = bldr.q.Start(cur)
	if bldr.plugin != nil {
		bldr.plugin.Start(cur)
	}
	return bldr
}

// Offset setup to query.
func (bldr *PugEventQueryBuilder) Offset(offset int) *PugEventQueryBuilder {
	bldr.q = bldr.q.Offset(offset)
	if bldr.plugin != nil {
		bldr.plugin.Offset(offset)
	}
	return bldr
}

// Limit setup to query.
func (bldr *PugEventQueryBuilder) Limit(limit int) *PugEventQueryBuilder {
	bldr.q = bldr.q.Limit(limit)
	if bldr.plugin != nil {
		bldr.plugin.Limit(limit)
	}
	return bldr
}

// Query returns *datastore.Query.
func (bldr *PugEventQueryBuilder) Query() datastore.Query {
	return bldr.q
}

// Filter with op & value.
func (p *PugEventQueryProperty) Filter(op string, value interface{}) *PugEventQueryBuilder {
	switch op {
	case "<=":
		p.LessThanOrEqual(value)
	case ">=":
		p.GreaterThanOrEqual(value)
	case "<":
		p.LessThan(value)
	case ">":
		p.GreaterThan(value)
	case "=":
		p.Equal(value)
	default:
		p.bldr.q = p.bldr.q.Filter(p.name+" "+op, value) // error raised by native query
	}
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, op, value)
	}
	return p.bldr
}

// LessThanOrEqual filter with value.
func (p *PugEventQueryProperty) LessThanOrEqual(value interface{}) *PugEventQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<=", value)
	}
	return p.bldr
}

// GreaterThanOrEqual filter with value.
func (p *PugEventQueryProperty) GreaterThanOrEqual(value interface{}) *PugEventQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">=", value)
	}
	return p.bldr
}

// LessThan filter with value.
func (p *PugEventQueryProperty) LessThan(value interface{}) *PugEventQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<", value)
	}
	return p.bldr
}

// GreaterThan filter with value.
func (p *PugEventQueryProperty) GreaterThan(value interface{}) *PugEventQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">", value)
	}
	return p.bldr
}

// Equal filter with value.
func (p *PugEventQueryProperty) Equal(value interface{}) *PugEventQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" =", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "=", value)
	}
	return p.bldr
}

// Asc order.
func (p *PugEventQueryProperty) Asc() *PugEventQueryBuilder {
	p.bldr.q = p.bldr.q.Order(p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Asc(p.name)
	}
	return p.bldr
}

// Desc order.
func (p *PugEventQueryProperty) Desc() *PugEventQueryBuilder {
	p.bldr.q = p.bldr.q.Order("-" + p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Desc(p.name)
	}
	return p.bldr
}
